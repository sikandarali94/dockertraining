version: '3'
services:
  web:
    stdin_open: true
    build:
      # context describes where we want all files and folders for this image to be pulled from.
      context: .
      # dockerfile describes which Dockerfile to use within our build context.
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    # Volumes is where we set up configuration for Docker Volumes
    volumes:
      - /app/node_modules
      # The . indicates current working directory. In this case it is the current working directory in the local file
      # system.
      - .:/app
  # The downside to this approach for running our tests in a service is that we are getting all the output from our test
  # suite inside of the logging interface of Docker Compose. And we do not have the ability to enter any Standard Input
  # / Output to this service container e.g. we can't hit enter to get the test suite to rerun.
  # Using Docker Attach with the tests service below will not allow us to interact with the test suite. This is because
  # the primary process within the container is actually npm and not npm run test. What the primary process does is that
  # it creates a separate process in the container that runs the tests. Unfortunately we cannot attach to that secondary
  # process that runs the tests and hence we cannot interact with the test suite.
  tests:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - /app/node_modules
      - .:/app
    command: ["npm", "run", "test"]